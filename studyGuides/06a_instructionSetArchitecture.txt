Instruction Set Architectures (ISA)
1. Instruction Set Architectures (ISA's) are differentiated by the following attributes:
- instruction set complexity: CISC (Complex Instruction Set Computer) vs RISC (Reduced Instruction Set Computer)
- instruction length: short (16-bit), long (32-bit), or variable (1 byte - 8 bytes or longer)
- types of operations: LOAD, STORE, ADD, SUB, MUL, DIV, CMP, BRANCH
- number of instructions that the ISA supports
- addressing mode: byte, word, or double-word addressable
- addressing type: immediate, memory direct, register direct, register indirect, register offset
  - immediate: operand is part of the instruction
  - memory direct: memory address is part of the instruction 
  - register direct: operand is in a register 
  - register indirect: memory address of the operand is in a register 
  - register-offset:
    - register-immediate: the memory address of the operand is determined by the sum of the value in a register (base) plus
      an immediate value (offset)
    - register-register: the memory address of the operand is determined by the sum of the value in a register (base) plus 
      the value in another register (offset)
- number of registers
- instruction operands 
  - type and length in bits: (8-bit - 64-bit)
  - number of operands per instruction: 0 - 3
  - operand location: register, immediate, or memory

2. the instructions that an ISA supports, fall into several types:
- load/store: d-type (data type) - load values from memory into registers and store values from registers to memory
- arithmetic/logic: r-type (register type) - all operands are registers 
- immediate: i-type (immediate type) - one or more of the operands are immediate (constant) values
- conditional transfer of control instructions: cb-type (conditional branch type) - used in conditional transfer of control instructions
- unconditional transfer of control instructions: b-type (branch type) - used in conditional transfer of control instructions, and when
  calling subroutines (functions)
- special purpose

3. a primary consideration for architecture design concerns how the CPU stores data
  - we have three choices, in choosing one over the other, the design considerations are simplicity and cost of the hardware design with respect to
    processor execution speed and ease of use 
- general purpose register (GPR) architecture: instruction operands are read from written to registers or memory 
- accumulator architecture: one instruction operand of a binary operation is in the accumulator, and the other operand is in memory
- stack architecture: instruction operands are read from and written to the stack 

4. most systems today are GPR systems. there are three types of GPR systems:
- memory/memory: all operands, two or three operands, for logical and arithmetic operations are read from memory
- register/memory: one or two operands for logical and arithmetic operations must be in registers. one operand at most is read from memory 
- load/store: operands for logical and arithmetic operations are all registers
  - before logical or arithmetic operations are executed, operands are loaded from memory into registers 
- the number of operands and the number of available registers has a direct effect on instruction length 

5. an example of a GPR memory/memory architecture:
- in a GPR memory/memory three-address system, the expression Z = (X + Y) - (W + U) might look like:
    - ADD T1, X, Y
    - ADD T2, W, U 
    - SUB Z, T1, T2 
- operands X, Y, W, U, Z, T1, and T2 are all memory operands. there are no register operands

6. an example of a GPR register/memory architecture:
- in a GPR register/memory three-address system, the expression Z = (X + Y) - (W + U) might look like:
    - ADD R1, X, Y
    - ADD R2, W, U 
    - SUB Z, R1, R2 
- operands X, Y, W, U, and Z are memory operands. operands R1 and R2 are register operands 

7. an example of a GPR register/memory architecture:
- in a GPR register/memory two-address system, the expression Z = (X + Y) - (W + U) might look like:
    - LDR R1, X 
    - ADD R1, Y 
    - LDR R2, W 
    - ADD R2, U 
    - SUB R1, R2 
    - STR Z, R1 
- operands X, Y, W, and Z are memory operands. operands R1 and R2 are register operands 

8. an example of a GPR load/store architecture:
- in a GPR load/store system, the expression Z = (X + Y) - (W + U) might look like:
    - LDR R1, X 
    - LDR R2, Y 
    - ADD R3, R1, R2 
    - LDR R1, W 
    - LDR R2, U 
    - ADD R4, R1, R2 
    - ADD R5, R3, R4 
    - STR Z, R5 
- operands X, Y, W, U, and Z are memory operands. operands R1, R2, R3, R4, and R5 are register operands 

9. an example of an accumulator-based load/store architecture (rather than a GPR load/store architecture):
- in an accumulator-based load/store system, the expression Z = (X + Y) - (W + U) might look like:
    - LDR X 
    - ADD Y 
    - STR TEMP 
    - LDR W 
    - ADD U 
    - SUB TEMP 
    - STR Z 
- All operands, X, Y, W, U, Z and TEMP are memory operands
- There is an implicit register, usually named the accumulator, that stores the loaded memory operands and stores the result of arithmetic operations

10. an example of a stack-based architecture (rather than a GPR or accumulator-based architecture):
- in a stack-based system, the postfix expression Z = (X + Y) - (W + U) might look like:
    - PUSH X 
    - PUSH Y 
    - ADD 
    - PUSH W 
    - PUSH U 
    - ADD 
    - SUB 
    - POP Z 
- All operands, X, Y, W, U, and Z are memory operands. 
- The memory operands are pushed to the stack before arithmetic operations are performed.

11. addressing modes specify where an operand is located
  - they can specify a constant, a register,  or a memory location
  - the actual location of an operand is its effective address 

- register addressing: the instruction contains a register
  - the register contains the data value 
  - the following instruction uses register addressing to add two register values (R0, R1) and store the result in a third register (R2):
    - ADD R2, R0, R1 

- immediate addressing: the instruction contains the data value 
  - the data value is termed an immediate value 
  - The following instruction uses immediate addressing to move an immediate binary value to the R0 register
    - MOVI R0, b00000001

- direct-memory (direct) addressing: the instruction contains the address of a data value, not the data value itself
  - The following instruction uses direct-memory addressing to add two values from memory (X, Y) and
    store the result in a register (R2). X represents the address of the memory location associated with X, and Y represents the address of the memory
    location associated with Y.
    - ADD R2, X, Y 
    




