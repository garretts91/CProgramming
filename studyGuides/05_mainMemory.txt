Main Memory
1. best performance at lowest cost, memory is organized in a heirarchical manner
- small amounts of fast memory storage are contained in or near the CPU
  - these include the CPU register set, the L1 cache, and the L2 cache 
  - larger amounts of slower main memory storage are accessed through the input/output (i/o) subsystem
  - larger amounts of slower secondary memory storage (SSD's/HDD's) are also accessed through the i/o subsystem
L0 - Registers
     - CPU registers hold words retreived from L1 cache 
L1 - L1 cache (SRAM)
     - L1 cache holds cache lines retreived from L2 cache 
L2 - L2 cache (SRAM)
     - L2 cache holds cache lines retreived from main memory 
L3 - Main Memory (DRAM)
     - Main memory holds disc blocks retreived from local discs
L4 - Local Secondary Storage (Local Discs)
     - local discs hold files retreived from discs on remote network servers
L5 - Remote Secondary Storage (Tapes, Distributed File Systems, Web Servers)

L0 - L3: smaller, faster, costlier per byte
L3 - L5: larger, slower, cheaper per byte 

2. cache memory and main memory are implemented using random access memory (RAM)
    - static RAM
    - dynamic RAM 
- cache memory is implemented using SRAM. SRAM is very fast memory implemented from digital circuits called latches 
- main memory is implemented using DRAM. DRAM consists of capacitors that slowly leak their charge over time and must be refreshed
    - every few milliseconds to prevent data loss 
- SRAM is more expensive than DRAM

3. memory is typically measured in kilobytes (KB), megabytes (MB), or gigabyte (GB)
    - 1 KB = 2^10 = 1024 bytes
    - 1 MB = 2^20 = 1,048,576 bytes 
    - 1 GB = 2^30 = 1,099,511,627,776 bytes

4. main memory (physical memory) consists of a linear array of addressable storage cells 
- each memory element has an associated memory address 
- a memory address is used as an index into the memory address space 
- memory can be byte-addressable, or word-addressable, where a word typically consists of two or more bytes
- memory is constructed of RAM chips. 
    - 1M x 8-bit RAM chip gives 1MB of memory 
    - 1M x 16-bit RAM chip gives us 1MB of 16-bit memory locations which is equal to 2MB of memory 
    - 4M x 8-bit RAM chip gives 4MB of memory 
    - 4M x 16-bit RAM chip gives 4MB of 16-bit memory locations which is equal to 8MB of memory 
- a computer can access a memory location that corresponds to a particular address 
    - Ex., to address each byte of a 1MB address space, 20 address lines are needed (2^20 = 1M)
    - if the 1MB of memory is word-addressable, where each word is 2 bytes, then 19 address lines are needed 
    - to address each byte of a 4MB address space, 22 address lines are needed (2^22 = 4M)
    - if the 4MB of memory is word-addressable,, where each word is 2 bytes, then 21 address lines are needed 

5. access is more efficient when memory is organized into banks of chips with the addresses interleaved across the chips 
- with high order interleaving, the high order bits of the address specify which memory bank (chip) contains the address of interest 
- with low order interleaving, the low order bits of the address specify which memory bank (chip) contains the address of interest

4 bits                  11 bits
0010                    00000100111
chip                    offset on chip
<----------15-bits------------------->
11 bits                 4 bits 
00100000010             0111
offset on chip          chip 

- ex. a byte-addressable main memory consists of 8 - 4 x 8-bit chips 
    - memory is therefore 32 bytes (8 chips * 4 bytes per chip)
    - to address 32 bytes, 5 bits are needed (2^5 = 32) 
    - to address 8 chips, 3 bits are reserved for the chip-select
    - the remaining 2 bits represent the offset into the chip that selects the corresponding byte

a: high-order memory interleaving
Module 0        Module 1        ...         Module 7
0               4                           28
1               5               ...         29
2               6               ...         30
3               7               ...         31

b: address structure
3 bits                          2 bits
module number                   offset in module 
<-------------------5-bits---------------------->

c: first two modules
Module          Decimal Word Address        Binary Address      Address Split per Given Structure   Module Number   Offset in Module 
Module 1        0                           00000               000 00                              0               0
                1                           00001               000 01                              0               1
                2                           00010               000 10                              0               2  
                3                           00011               000 11                              0               3
Module 1        4                           00100               001 00                              1               0
                5                           00101               001 01                              1               1  
                6                           00110               001 10                              1               2
                7                           00111               001 11                              1               3

- ex. a byte-addresable main memory consists of 16 - 2K x 8-bit chips
  - memory is therefore 32K bytes (16 chips * 2K bytes per chip)
  - to address 32K, 15 bits are needed (2^15 = 32K)
  - to address 16 chips, 4 bits are reserved for the chip-select
    - the remaining 11 bits represent the offset into the chip that selects the corresponding byte 

- ex. a byte-addressable main memory consists of 16 - 2K x 16-bit chips
  - Memory is therefore 64K bytes (16 chips * (2K * 2B))
  - To address 64K, 16 bits are needed (2^16 = 64K)
  - To address 16 chips, 4 bits are reserved for the chip-select
    - The remaining 12 bits represent the offset into the chip that selects the corresponding byte

- ex. A word-addressable main memory consists of 16 - 2K x 16-bit chips
  - Memory is therefore 64K bytes (16 chips * (2K * 2B))
  - In terms of words, there are 32K words (16 chips * (2K * 2B / 2 bytes per word))
  - Since the memory is word-addressable, to address 32K words, 15 bits are needed (2^15 = 32K)
  - To address 16 chips, 4 bits are reserved for the chip-select
  - The remaining 11 bits represent the offset into the chip that selects the corresponding word


